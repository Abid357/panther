/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frame;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

import Core.Item;
import Facade.Functions;
import GUI._GUIGlobals;

/**
 *
 * @author Abid-Temp
 */
public class ItemDetails extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int frameWidth;
	private int frameHeight;
	private int noOfItems;
	private boolean isProductsOnly;
	private boolean isSpecific;

	private JLabel backgroundL;
	private JSpinner noOfItemsS;
	private JComboBox<String> inventoryNoCB;
	private int inventoryNo;
	private JPanel itemP;
	private ArrayList<JComboBox<String>> itemCBs;
	private ArrayList<JSpinner> quantitySs;

	private JPanel functionP;
	private JLayeredPane functionsLP;

	public int getItemCBX() {
		return 28;
	}

	public int getItemCBY() {
		return 0;
	}

	public int getItemCBgap() {
		return 4;
	}

	public JFrame getFrame() {
		return this;
	}

	
	public JSpinner getNoOfItemsS() {
		return noOfItemsS;
	}

	public JComboBox<String> getInventoryCB() {
		return inventoryNoCB;
	}

	public ArrayList<JComboBox<String>> getItemCBs() {
		return itemCBs;
	}

	public ArrayList<JSpinner> getQuantitySs() {
		return quantitySs;
	}

	public JLabel getBackgroundL() {
		return backgroundL;
	}

	public JPanel getFunctionP() {
		return functionP;
	}

	public JLayeredPane getFunctionsLP() {
		return functionsLP;
	}

	public void setEditable(boolean isEnabled) {
		// IMPLEMENT ME
	}

	public int getInventoryNo() {
		return inventoryNo;
	}

	public void setInventoryNo(int inventoryNo) {
		this.inventoryNo = inventoryNo;
	}

	public boolean getIsProductsOnly() {
		return this.isProductsOnly;
	}

	public void setIsProductsOnly(boolean isProductsOnly) {
		this.isProductsOnly = isProductsOnly;
	}
	
	public boolean getIsSpecific() {
		return this.isSpecific;
	}

	public void setIsSpecific(boolean isSpecific) {
		this.isSpecific = isSpecific;
	}

	public void setClassVariables() {
		switch (Functions.getTempObj().getClass().toString()) {
		case "class Frame.Sale": {
			this.inventoryNo = ((Frame.Sale) Functions.getTempObj()).getInventoryNo();
			this.isProductsOnly = true;
			this.isSpecific = true;
			this.noOfItemsS.setEnabled(true);
			break;
		}
		case "class Frame.Import": {
			this.inventoryNo = -1;
			this.isProductsOnly = true;
			this.isSpecific = false;
			this.inventoryNoCB.setEnabled(false);
			this.noOfItemsS.setEnabled(true);
			break;
		}
		case "class Frame.Purchase": {
			this.inventoryNo = -1;
			this.isProductsOnly = true;
			this.isSpecific = false;
			this.inventoryNoCB.setEnabled(false);
			this.noOfItemsS.setEnabled(true);
			break;
		}
		case "class Frame.Damage": {
			this.inventoryNo = -1;
			this.isProductsOnly = false;
			this.isSpecific = true;
			this.noOfItemsS.setEnabled(false);
			break;
		}
		case "class Frame.Promotion": {
			this.inventoryNo = -1;
			this.isProductsOnly = true;
			this.isSpecific = true;
			this.noOfItemsS.setEnabled(false);
			break;
		}
		case "class Frame.Transport": {
			this.inventoryNo = -1;
			this.isProductsOnly = false;
			this.isSpecific = false;
			this.noOfItemsS.setEnabled(false);
			break;
		}
		}
	}

	/**
	 * Creates new form Transaction
	 */
	public ItemDetails(JPanel panel) {
		frameWidth = _GUIGlobals.frameWidth;
		frameHeight = _GUIGlobals.frameHeight;
		functionP = panel;
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		functionsLP = new JLayeredPane();
		backgroundL = new JLabel();
		noOfItemsS = new JSpinner();
		inventoryNoCB = new JComboBox<String>();
		itemP = new JPanel();
		itemCBs = new ArrayList<JComboBox<String>>(noOfItems);
		quantitySs = new ArrayList<JSpinner>(noOfItems);
		noOfItems = 0;
		setClassVariables();

		setUndecorated(true);
		requestFocus();
		getContentPane().setLayout(new AbsoluteLayout());

		functionsLP.setBackground(new Color(13, 13, 13));
		functionsLP.setForeground(_GUIGlobals.fontColor);
		functionsLP.setLayout(new AbsoluteLayout());
		functionsLP.add(functionP, new AbsoluteConstraints(0, 0, -1, -1));
		getContentPane().add(functionsLP, new AbsoluteConstraints(0, 624, -1, -1));

		itemP.setBackground(new Color(0, 0, 0, 0));
		itemP.setPreferredSize(new Dimension(610, 520));
		getContentPane().add(itemP, new AbsoluteConstraints(20, 100, -1, -1));

		noOfItemsS.setFont(new Font("Century Gothic", 0, 16)); // NOI18Ns
		noOfItemsS.setBorder(null);
		noOfItemsS.setPreferredSize(new Dimension(55, 30));
		noOfItemsS.setModel(new SpinnerNumberModel(0, 0, 17, 1));
		((JSpinner.DefaultEditor) noOfItemsS.getEditor()).getTextField().setEditable(false);
		noOfItemsS.addChangeListener(new ChangeListener() {

			@Override
			public void stateChanged(ChangeEvent arg0) {
				// TODO Auto-generated method stub
				JSpinner s = (JSpinner) arg0.getSource();
				if (noOfItems < (int) s.getValue()) {
					JSpinner quantityS = new JSpinner();
					quantityS.setFont(new Font("Century Gothic", 0, 12)); // NOI18Ns
					quantityS.setBorder(null);
					quantityS.setPreferredSize(new Dimension(55, 24));
					((JSpinner.DefaultEditor) quantityS.getEditor()).getTextField().setEditable(false);
					quantityS.setModel(new SpinnerNumberModel(0, 0, 0, 1));
					JComboBox<String> itemCB = new JComboBox<String>();
					itemCB.setBackground(_GUIGlobals.fontColor);
					itemCB.setFont(new Font("Century Gothic", 0, 12)); // NOI18N
					itemCB.setForeground(_GUIGlobals.fontColor);
					itemCB.setBorder(null);
					itemCB.setPreferredSize(new Dimension(535, 24));
					if (isSpecific)
						Functions.loadItemCB(itemCB, -1, inventoryNo, isProductsOnly);
					else
						Functions.loadAllItemCB(itemCB, -1, isProductsOnly);
					itemCB.addItemListener(new ItemListener() {

						@Override
						public void itemStateChanged(ItemEvent evt) {
							// TODO Auto-generated method stub
							if (evt.getStateChange() == ItemEvent.SELECTED) {
								@SuppressWarnings("unchecked")
								String string = (String) ((JComboBox<String>) evt.getSource()).getSelectedItem();
								if (string != null)
									if (!string.equals(""))
										if (isSpecific) {
											Item item = _GUIGlobals.parseItem(string, inventoryNo);
											quantityS.setModel(new SpinnerNumberModel(0, 0, item.getQuantity(), 1));
										} else
											quantityS.setModel(new SpinnerNumberModel(new Integer(0), new Integer(0),
													null, new Integer(1)));
							}
						}
					});
					quantitySs.add(quantityS);
					itemCBs.add(itemCB);
					itemP.add(itemCB,
							new AbsoluteConstraints(0, ((24 + getItemCBgap()) * noOfItems) + getItemCBY(), -1, -1));
					itemP.add(quantityS,
							new AbsoluteConstraints(550, ((24 + getItemCBgap()) * noOfItems) + getItemCBY(), -1, -1));
					itemP.getRootPane().revalidate();
					itemP.getRootPane().repaint();
					noOfItems++;
				} else if (noOfItems > (int) s.getValue()) {
					quantitySs.remove(noOfItems - 1);
					itemCBs.remove(noOfItems - 1);
					itemP.remove((2 * noOfItems) - 1);
					itemP.remove((2 * noOfItems) - 2);
					itemP.getRootPane().revalidate();
					itemP.getRootPane().repaint();
					noOfItems--;
				}
			}

		});
		getContentPane().add(noOfItemsS, new AbsoluteConstraints(158, 50, -1, -1));

		inventoryNoCB.setBackground(_GUIGlobals.fontColor);
		inventoryNoCB.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
		inventoryNoCB.setForeground(_GUIGlobals.fontColor);
		inventoryNoCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
		inventoryNoCB.setBorder(null);
		inventoryNoCB.setPreferredSize(new java.awt.Dimension(268, 30));
		inventoryNoCB.addItemListener(new ItemListener() {

			@Override
			public void itemStateChanged(ItemEvent arg0) {
				// TODO Auto-generated method stub
				@SuppressWarnings("unchecked")
				String inventoryString = (String) ((JComboBox<String>) arg0.getSource()).getSelectedItem();
				if (inventoryString != null)
					if (!inventoryString.equals("")) {
						noOfItemsS.setEnabled(true);
						if (inventoryString.contains(":")) {
							inventoryNo = _GUIGlobals.parseWarehouse(inventoryString).getInventoryNo();
						} else {
							inventoryNo = _GUIGlobals.parseInventory(inventoryString).getNumber();
						}
						noOfItemsS.setValue(0);
						quantitySs.clear();
						itemCBs.clear();
						itemP.removeAll();
						itemP.getRootPane().revalidate();
						itemP.getRootPane().repaint();
						noOfItems = 0;
					}
			}
		});
		getContentPane().add(inventoryNoCB, new AbsoluteConstraints(366, 50, -1, -1));

		backgroundL.setForeground(new Color(166, 130, 52));
		backgroundL.setIcon(new ImageIcon(_GUIGlobals.directory + "\\Raw Materials\\Templates\\item.jpg")); // NOI18N
		backgroundL.setBorder(BorderFactory.createLineBorder(_GUIGlobals.fontColor));
		backgroundL.setMaximumSize(new Dimension(frameWidth, frameHeight));
		getContentPane().add(backgroundL, new AbsoluteConstraints(0, 0, -1, -1));

		pack();
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}// </editor-fold>//GEN-END:initComponents
}
