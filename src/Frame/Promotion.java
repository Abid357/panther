/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frame;

import java.awt.event.ActionEvent;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.io.IOException;
import java.awt.event.ActionListener;
import java.awt.Color;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Calendar;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

import com.toedter.calendar.JDateChooser;

import Core.Item;

import javax.swing.JFrame;

import Facade.Functions;
import GUI.RectangularButton;
import GUI._GUIGlobals;

/**
 *
 * @author Abid-Temp
 */
public class Promotion extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private JLabel backgroundL;
	private JDateChooser dateDC;
	private JTextArea descriptionTA;
	private JPanel functionP;
	private JLayeredPane functionsLP;
	private JSpinner timeS;
	private JTextField transactionTF;
	private Date date;
	private ArrayList<Item> items;
	private RectangularButton selectItemB;
	private JTextField itemTF;
	private JCheckBox isSampleCB;
	private int inventoryNo;

	public void setBackground(JLabel background) {
		BufferedImage img = null;
		try {
			img = ImageIO.read(new File(_GUIGlobals.directory + "\\Raw Materials\\Templates\\promotion.jpg"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		Image dimg = img.getScaledInstance(_GUIGlobals.frameWidth, _GUIGlobals.frameHeight, Image.SCALE_SMOOTH);
		ImageIcon imageIcon = new ImageIcon(dimg);
		background.setIcon(imageIcon);
	}

	public JLabel getBackgroundL() {
		return backgroundL;
	}

	public JDateChooser getDateDC() {
		return dateDC;
	}

	public JTextArea getDescriptionTA() {
		return descriptionTA;
	}

	public JPanel getFunctionP() {
		return functionP;
	}

	public JLayeredPane getFunctionsLP() {
		return functionsLP;
	}

	public JSpinner getTimeS() {
		return timeS;
	}

	public JTextField getTransactionTF() {
		return transactionTF;
	}

	public Date getDate() {
		return date;
	}

	public ArrayList<Item> getItems() {
		return items;
	}

	public JButton getSelectItemB() {
		return selectItemB;
	}

	public JTextField getItemTF() {
		return itemTF;
	}

	public int getInventoryNo() {
		return inventoryNo;
	}

	public void setItems(ArrayList<Item> items) {
		this.items = items;
	}

	public void setInventoryNo(int inventoryNo) {
		this.inventoryNo = inventoryNo;
	}

	public JCheckBox getIsSampleCB() {
		return isSampleCB;
	}

	public void reset() {
		items = null;
	}

	public Dimension getItemTFPos() {
		double wfactor = 5.538461538;
		double hfactor = 9.146341463;
		return (new Dimension((int) (_GUIGlobals.screenWidth / wfactor), (int) (_GUIGlobals.screenHeight / hfactor)));
	}

	public Dimension getSelectItemBPos() {
		double wfactor = 4.583554377;
		double hfactor = 9.453781513;
		return (new Dimension((int) (_GUIGlobals.screenWidth / wfactor), (int) (_GUIGlobals.screenHeight / hfactor)));
	}

	public Dimension getIsSampleCBSize() {
		double wfactor = 47.47252747;
		double hfactor = 26.78571429;
		return (new Dimension((int) (_GUIGlobals.screenWidth / wfactor), (int) (_GUIGlobals.screenHeight / hfactor)));
	}

	public Dimension getIsSampleCBPos() {
		double wfactor = 3.179977917;
		double hfactor = 9.375;
		return (new Dimension((int) (_GUIGlobals.screenWidth / wfactor), (int) (_GUIGlobals.screenHeight / hfactor)));
	}

	public void setEditable(boolean isEnabled) {
		getDateDC().setEnabled(isEnabled);
		getTimeS().setEnabled(isEnabled);
		getDescriptionTA().setEnabled(isEnabled);
		getSelectItemB().setEnabled(isEnabled);
		getIsSampleCB().setEnabled(isEnabled);
	}

	/**
	 * Creates new form Transaction
	 */
	public Promotion(JPanel panel) {
		functionP = panel;
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		transactionTF = new JTextField();
		timeS = new JSpinner(new SpinnerDateModel());
		descriptionTA = new JTextArea();
		functionsLP = new JLayeredPane();
		backgroundL = new JLabel();
		dateDC = new JDateChooser();
		selectItemB = new RectangularButton();
		itemTF = new JTextField();
		isSampleCB = new JCheckBox();
		inventoryNo = -1;

		setUndecorated(true);
		setTitle("Promotion");
		setPreferredSize(new Dimension(_GUIGlobals.frameWidth, _GUIGlobals.frameHeight));
		requestFocus();
		getContentPane().setLayout(new AbsoluteLayout());

		transactionTF.setEditable(false);
		transactionTF.setBackground(new Color(13, 13, 13));
		transactionTF.setFont(new Font("Century Gothic", 0, _GUIGlobals.getFontSize_18())); // NOI18N
		transactionTF.setForeground(new Color(255, 255, 255));
		transactionTF.setHorizontalAlignment(JTextField.CENTER);
		transactionTF.setBorder(null);
		transactionTF.setPreferredSize(
				new Dimension(Transaction.getTransactionTFSize().width, Transaction.getTransactionTFSize().height));
		getContentPane().add(transactionTF, new AbsoluteConstraints(Transaction.getTransactionTFPos().width,
				Transaction.getTransactionTFPos().height, -1, -1));

		dateDC.setForeground(_GUIGlobals.fontColor);
		dateDC.setFont(new Font("Century Gothic", 0, _GUIGlobals.getFontSize_14())); // NOI18N
		dateDC.setPreferredSize(new Dimension(Transaction.getDateDCSize().width, Transaction.getDateDCSize().height));
		dateDC.setDate(Calendar.getInstance().getTime());
		dateDC.setMaxSelectableDate(Calendar.getInstance().getTime());
		dateDC.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

			@Override
			public void propertyChange(PropertyChangeEvent evt) {
				// TODO Auto-generated method stub
				if (evt.getPropertyName().equals("date")) {
					date = new Date(dateDC.getDate().getTime());
				}
			}
		});
		getContentPane().add(dateDC,
				new AbsoluteConstraints(Transaction.getDateDCPos().width, Transaction.getDateDCPos().height, -1, -1));

		date = new Date(dateDC.getDate().getTime());

		timeS.setFont(new Font("Century Gothic", 0, _GUIGlobals.getFontSize_13())); // NOI18N
		timeS.setBorder(null);
		timeS.setPreferredSize(new Dimension(Transaction.getTimeSSize().width, Transaction.getTimeSSize().height));
		timeS.setEditor(new JSpinner.DateEditor(timeS, "HH:mm:ss"));
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		timeS.setValue(cal.getTime());
		getContentPane().add(timeS,
				new AbsoluteConstraints(Transaction.getTimeSPos().width, Transaction.getTimeSPos().height, -1, -1));

		descriptionTA.setBackground(new Color(13, 13, 13));
		descriptionTA.setColumns(20);
		descriptionTA.setFont(new Font("Century Gothic", 0, _GUIGlobals.getFontSize_18())); // NOI18N
		descriptionTA.setForeground(_GUIGlobals.fontColor);
		descriptionTA.setLineWrap(true);
		descriptionTA.setRows(4);
		descriptionTA.setTabSize(3);
		descriptionTA.setBorder(null);
		descriptionTA.setPreferredSize(
				new Dimension(Transaction.getDescriptionTASize().width, Transaction.getDescriptionTASize().height));
		getContentPane().add(descriptionTA, new AbsoluteConstraints(Transaction.getDescriptionTAPos().width,
				Transaction.getDescriptionTAPos().height, -1, -1));

		functionsLP.setPreferredSize(
				new Dimension(Transaction.getFunctionsLPSize().width, Transaction.getFunctionsLPSize().height));
		functionsLP.setBackground(new Color(13, 13, 13));
		functionsLP.setForeground(_GUIGlobals.fontColor);
		functionsLP.setLayout(new AbsoluteLayout());
		functionsLP.add(functionP, new AbsoluteConstraints(0, 0, -1, -1));
		getContentPane().add(functionsLP, new AbsoluteConstraints(Transaction.getFunctionsLPPos().width,
				Transaction.getFunctionsLPPos().height, -1, -1));

		itemTF.setEditable(false);
		itemTF.setBackground(new Color(13, 13, 13));
		itemTF.setFont(new Font("Century Gothic", 0, _GUIGlobals.getFontSize_24())); // NOI18N
		itemTF.setForeground(_GUIGlobals.fontColor);
		itemTF.setHorizontalAlignment(JTextField.CENTER);
		itemTF.setBorder(null);
		itemTF.setPreferredSize(new Dimension(Transaction.getItemTFSize().width, Transaction.getItemTFSize().height));
		getContentPane().add(itemTF, new AbsoluteConstraints(getItemTFPos().width, getItemTFPos().height, -1, -1));

		selectItemB.setBorder(null);
		selectItemB.setPreferredSize(
				new Dimension(Transaction.getSelectItemBSize().width, Transaction.getSelectItemBSize().height));
		selectItemB.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				Functions.create("ADD ITEM DETAILS");
			}

		});
		getContentPane().add(selectItemB,
				new AbsoluteConstraints(getSelectItemBPos().width, getSelectItemBPos().height, -1, -1));

		isSampleCB.setPreferredSize(new Dimension(getIsSampleCBSize().width, getIsSampleCBSize().height));
		isSampleCB.setForeground(_GUIGlobals.fontColor);
		isSampleCB.setBorder(null);
		isSampleCB.setSelected(false);
		getContentPane().add(isSampleCB,
				new AbsoluteConstraints(getIsSampleCBPos().width, getIsSampleCBPos().height, -1, -1));

		setBackground(backgroundL);
		backgroundL.setBorder(BorderFactory.createLineBorder(_GUIGlobals.fontColor));
		backgroundL.setPreferredSize(new Dimension(_GUIGlobals.frameWidth, _GUIGlobals.frameHeight));
		getContentPane().add(backgroundL, new AbsoluteConstraints(0, 0, -1, -1));

		pack();
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}// </editor-fold>//GEN-END:initComponents
}
